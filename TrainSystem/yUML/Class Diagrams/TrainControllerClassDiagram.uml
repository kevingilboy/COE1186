@startuml

title Train Controller Class Diagram

class TrainController {
	-time : integer
	-controlList : ArrayList
	-positions : ArrayList
	+mbo : MBO
	+trnModel : TrainModel
	+timeUpdate()
	+addTrain()
	+setCtcAuth()
	+setBrakingDist()
	+setActualSpeed()
	+setPosition()
	+setTime()
	+suggestTrainSpeed()
	+getPosition()
	+getTrainController()
}

class TrnController {
	-iden : String
	-time : integer
	-mbo : MBO
	-trnModel : TrainModel
	-pi : PIController
	-controlGUI : TrainControlGUI
	-ctcAuth : double
	-mboAuth : double
	-overallAuth : double
	-actualSpeed : double
	-setpointSpeed : double
	-power : double
	-rightDoor : boolean
	-leftDoor : boolean
	-lightState : boolean
	-sBrakes : boolean
	-eBrakes : boolean
	-brakingDist : double
	-temperature : integer
	+timeUpdate()
	+guiUpdate()
	+setCtcAuth()
	+setMboAuth()
	+setBrakingDist()
	+setActualSpeed()
	+setPosition()
	+setTime()
	+suggestTrainSpeed()
	-transmitPower()
	-transmitPosition()
	-transmitTime()
	-openLeft()
	-closeLeft()
	-openRight()
	-closeRight()
	-lightsOn()
	-lightOff()
	-sBrakesOn()
	-sBrakesOff()
	-eBrakesOn()
	-eBrakesOff()
	-calcPowerOutput()
	-calcAuth()
	-brakingCheck()
	-lightCheck()
	-stationCheck()
	-decodeBeacon()
	-announceNear()
	-announceArrive()
}

class TrainControllerGUI {
	-speedField : JTextField
	-authField : JTextField
	-newSpeedField : JTextField
	-powerOutField : JTextField
	-tempField : JTextField
	-serviceOn : JRadioButton
	-serviceOff : JRadioButton
	-emergencyOn : JRadioButton
	-emergencyOff : JRadioButton
	-lightOn : JRadioButton
	-lightOff : JRadioButton
	-rightOpen : JRadioButton
	-leftOpen : JRadioButton
	-rightClose : JRadioButton
	-leftClose : JRadioButton
	-engineerGUIButton : JButton
	-eGUI : EngineerGUI
	-pi : PIController
	+guiUpdate()
	+setSpeed()
	+setAuth()
	+setPower()
	+setTemp()
	+setLeft()
	+setRight()
	+setLights()
	+setService()
	+setEmergency()
}

class EngineerGUI {
	-currentPField : JTextField
	-newPField : JTextField
	-setNewPButton : JButton
	-currentIField : JTextField
	-newIField : JTextField
	-setNewIButton : JButton
	-pi : PIController
}

class PIController {
	-P : double
	-I : double
	-maxIOutput : double
	-maxError : double
	-errorSum : double
	-maxOutput : double
	-minOutput : double
	-setpoint : double
	-lastActual : double
	-firstRun : boolean
	-reversed : boolean
	-outputRampRate : double
	-lastOutput : double
	-outputFilter : double
	-setpointRange : double
	-init()
	-checkSigns()
	-clamp()
	-bounded()
	+setP()
	+setI()
	+getP()
	+getI()
	+setMaxIOutput()
	+setOutputLimits()
	+setSetpoint()
	+getOutput()
	+reset()
	+setSetpointRange()
	+setOutputFilter()
}

left to right direction

TrainController "1" *--> "1..*" TrnController
TrnController "1" --> "1" TrainControllerGUI
TrainControllerGUI "1" --> "1" EngineerGUI
EngineerGUI "1" <--> "1" PIController
PIController "1" ..|> "1" TrnController : utilizes

@enduml