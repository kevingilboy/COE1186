@startuml
title Track Controller Class Diagram

skinparam classBackgroundColor #e6ffcc
skinparam classBorderColor 	#049595
skinparam packageBorderCOlor  #049595
skinparam arrowColor #006666

class TrackControllers {
	{field} + waysideControllers : ArrayList <WaysideController>[]
	{field} + trkmdl : TrackModel
	__
	{method} + suggestTrainSetpointSpeed(string trainName, int speed)
	{method} + transmitCtcAuthority(string trainName, int authority)
	{method} + recieveBlockInfo(string line, int blockId) : Block
    {method} + transmitBlockMaintenance(String line, int blockId, boolean maintenance)
	{method} + transmitSwitchState(string line, int blockId, boolean switch)
	..
	{method} + updateTime(int time)
	{method} - initializeWaysides() 
}

class TrackControllersGUI {
	{field} - waysideIndex : int
	__
	{method} - openWaysideGui(int waysideIndex)
}

class WaysideController {
	{field} - trkmdl : TrackModel
	{field} - line : string
	{field} - section : string
	{field} - blockId : int
	{field} - lightState : boolean
	{field} - switchState : boolean
	{field} - crossingState : bolean
	{field} - status : string
	{field} - occupancy : boolean
	{field} - light : boolean
	{field} - switch : boolean
	{field} - crossing : boolean
	__
	{method} - timeUpdate(int time)
		'calls runPLC( ), guiUpdate( ), transmit...State( )
	{method} - guiUpdate()
		'calls GUI.displayInfo( )
	..
	{method} - recieveBlockInfo(string line, int blockId) : Block
	{method} - transmitLightState(string line, int blockId, boolean light)
	{method} - transmitCrossingState(string line, int blockId, boolean crossing)
	{method} - transmitSwitchState(string line, int blockId, boolean switch)
}

class WaysideControllerGUI {
	{field} - line : string
	{field} - section : string
	{field} - blockId : int
	{field} - plcPath : string
	__
	{method} - displayInfo()
		'updates all values on gui
	{method} - getBlockInfo(string line, int blockId) : Block
		'calls waysideController.recieveBlockInfo( ), displayInfo( )
	{method} - uploadPLC()
		'calls PLC.parsePLC(string path), runPLC( )
	{method} - runPLC(boolean occupancy)
		'update states using PLC.logic
}

class PLC {
	{field} - lightLogic : string 
	{field} - switchLogic : string
	{field} - crossingLogic : string
	__
	{method} - parsePLC(string path)
		'parses and updates logic values
}

TrackControllers -down-> "1..4" WaysideController
TrackControllers -right- "1" TrackControllersGUI
WaysideController -right- "1" WaysideControllerGUI
WaysideController *-down- "1" PLC

@enduml