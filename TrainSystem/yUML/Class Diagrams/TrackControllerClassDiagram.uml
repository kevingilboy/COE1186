@startuml
title Track Controller Class Diagram

skinparam classBackgroundColor #e6ffcc
skinparam classBorderColor 	#049595
skinparam packageBorderCOlor  #049595
skinparam arrowColor #006666

package "Shared"{
    interface Module{
        +timeUpdate(SimTime): boolean
    }

    class SimTime{
        +hr: int
        +min: int
        +sec: int
        +toString(): String
    }
}

package Module.TrackControllers{
	class TrackControllers {
		{field} + trkmdl : TrackModel
		{field} + waysideControllers : ArrayList <WaysideController>
		__
		{method} + transmitSuggestedTrainSetpointSpeed(String trainName, int speed)
		{method} + transmitCtcAuthority(String trainName, int authority)
		{method} + recieveBlockInfo(String line, int blockId) : Block
	    {method} + transmitBlockMaintenance(String line, int blockId, boolean maintenance)
		{method} + transmitSwitchState(String line, int blockId, boolean switch)
		{method} - transmitLightState(String line, int blockId, boolean light)
		{method} - transmitCrossingState(String line, int blockId, boolean crossing)
		..
		{method} + timeUpdate(SimTime)
		{method} - initializeWaysides() 
	}

	class TrackControllersGUI {
		{field} - waysideIndex : int
		__
		{method} - openWaysideGui(int waysideIndex)
	}

	class WaysideController {
		{field} - trkctls : TrackControllers
		{field} - associatedLine : String
		{field} - associatedBlocks : Array[int]
		{field} - line : String
		{field} - section : String
		{field} - blockId : int
		{field} - lightState : boolean
		{field} - switchState : boolean
		{field} - crossingState : bolean
		{field} - status : String
		{field} - occupancy : boolean
		{field} - light : boolean
		{field} - switch : boolean
		{field} - crossing : boolean
		__
		{method} - recieveBlockInfo(String line, int blockId) : Block
		{method} - updateStates()
			'calls runPLC( ), guiUpdate( ), trkctls.transmit...State( ) if occupancy has changed
		{method} - runPLC(boolean occupancy)
			'update states using PLC.logic
		{method} - guiUpdate()
			'calls GUI.displayInfo( )
	}

	class WaysideControllerGUI {
		{field} - line : String
		{field} - section : String
		{field} - blockId : int
		{field} - plcPath : String
		__
		{method} - displayInfo()
			'calls waysideController.receiveBlockInfo( )
		{method} - uploadPLC()
			'calls PLC.parsePLC(String path)
	}

	class PLC {
		{field} - lightLogic : String 
		{field} - switchLogic : String
		{field} - crossingLogic : String
		__
		{method} - parsePLC(String path)
			'parses and updates logic values
	}
}

Module -- SimTime : imports
TrackControllers .right.|> Module : implements
TrackControllers o-down- "1..4" WaysideController : contains
TrackControllers *-left- "1" TrackControllersGUI : instantiates
WaysideController *-left- "1" WaysideControllerGUI : instantiates
WaysideController *-down- "1" PLC : has

@enduml